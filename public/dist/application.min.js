"use strict";var ApplicationConfiguration=function(){var applicationModuleName="seanjs",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload","ngLodash","yaru22.angular-timeago","angulartics","angulartics.google.analytics","nvd3"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider,$routeProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;Authentication.user.roles&&toState.data.roles.forEach(function(role){if(void 0!==Authentication.user.roles&&Authentication.user.roles.indexOf(role)!==-1)return allowed=!0,!0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin"))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){fromState.data&&fromState.data.ignoreState||($state.previous={state:fromState,params:fromParams,href:$state.href(fromState,fromParams)})})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("challenge",["core"]),ApplicationConfiguration.registerModule("core",["yaru22.angular-timeago","angulartics","ngIdle"]),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("news",["core"]),ApplicationConfiguration.registerModule("rankings",["core"]),ApplicationConfiguration.registerModule("user",["core"]),ApplicationConfiguration.registerModule("user.admin",["core.admin"]),ApplicationConfiguration.registerModule("user.admin.routes",["core.admin.routes"]),angular.module("challenge").config(["$stateProvider",function($stateProvider){$stateProvider.state("challenge",{url:"/challenge","abstract":!0,templateUrl:"modules/challenges/client/views/challenge.client.view.html",data:{roles:["user"]},controller:"ChallengeController"}).state("challenge.create",{url:"/challenge",templateUrl:"modules/challenges/client/views/challenge-modal.client.view.html",controller:"ChallengeController"})}]),angular.module("challenge").controller("ChallengeController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator","Admin","$uibModal","Challenges","Circuit",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator,Admin,$uibModal,Challenges,Circuit){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.selectedTime="Now",$scope.message="",$scope.challengeId=-1,$scope.challengerId=-1,$scope.challengeeId=-1,$scope.challenges={},$scope.challengesToday=[],$scope.pastChallenges=[],$scope.upcomingChallenges=[],$scope.initPage=function(){$scope.challenges={},$scope.challengesToday=[],$scope.pastChallenges=[],$scope.upcomingChallenges=[],$http.get("/api/user").success(function(response){$scope.success=!0,$scope.currRank=response.rank,$scope.challengerId=response.id,(new Circuit).then(function(result){$scope.circuit=result.circuit($scope.currRank),$scope.model={opponentId:-1},$scope.run=function(){},Challenges.query(function(data){$scope.users=data,"World Circuit"===$scope.circuit&&$scope.users.length<1?$scope.message="Looks like you are in position #1! Wait until someone else challenges you.":"World Circuit"!==$scope.circuit&&$scope.currRank%result.cSize===1?$scope.message="You are at the top of your circuit! Play the bottom player from the "+result.circuit($scope.currRank-result.cSize)+" to move up.":$scope.users.length<1&&($scope.message="Looks like you don't have anyone to challenge.")}),$scope.getChallenges()})}).error(function(response){$scope.error=response.message})},$scope.initPage(),$scope.editModal=function(challenge){var modal=$uibModal.open({templateUrl:"modules/challenges/client/views/edit-challenge.client.view.html",controller:"ResultController",scope:$scope,backdrop:!1,windowClass:"app-modal-window",resolve:{challenge:function(){return challenge}}});modal.result.then(function(){$scope.initPage()})},$scope.confirmResultModal=function(challenge,winnerId){$scope.Submit(challenge,winnerId),$scope.initPage()},$scope.cancelModal=function(challengeId){var modal=$uibModal.open({templateUrl:"modules/challenges/client/views/cancel-modal.client.view.html",controller:"DeleteController",scope:$scope,backdrop:!1,windowClass:"app-modal-window",resolve:{challengeId:function(){return challengeId}}});modal.result.then(function(){$scope.initPage()})},$scope.createChallengeModal=function(){var modal=$uibModal.open({templateUrl:"modules/challenges/client/views/challenge-modal.client.view.html",controller:"ChallengeController",scope:$scope,backdrop:!1,windowClass:"app-modal-window"});modal.result.then(function(){$scope.initPage()})},$scope.createChallenge=function(){if($scope.model.opponentId!==-1){$scope.challengeeId=$scope.model.opponentId;var challengObj={scheduledTime:$scope.dt,challengerUserId:$scope.challengerId,challengeeUserId:$scope.model.opponentId,winnerUserId:null,accepted:null};$http.post("/api/challenge/create",challengObj).success(function(response){$scope.challengeId=response.id,challengObj.challengeId=response.id,$http.post("/api/emails/challengeCreated",challengObj)}).error(function(response){$scope.error=response.message}),$scope.$close(!0),toastr.success("Challenge created","Success")}},$scope.getChallenges=function(){var params={userId:$scope.challengerId,paranoid:!0};$http.post("/api/challenge/mychallenges",params).success(function(response){$scope.challenges=response,angular.forEach($scope.challenges,function(value,index){$http.post("/api/user/getUserById",{userId:value.challengerUserId}).success(function(data){value.challengerUser=data}),$http.post("/api/user/getUserById",{userId:value.challengeeUserId}).success(function(data){value.challengeeUser=data}),value.selected=null}),$scope.filterChallenges()})},$scope.acceptChallenge=function(challengeId,challengerUserId,challengeeUserId,scheduledTime){$http.post("api/challenge/accept",{challengeObj:{challengeId:challengeId,challengerUserId:challengerUserId,challengeeUserId:challengeeUserId,scheduledTime:scheduledTime}}).success(function(){toastr.success("Challenge Accepted!","Success"),$scope.initPage()})["catch"](function(err){toastr.error("Error accepting challenge ("+err.message+")","Error")})},$scope.declineChallenge=function(challengeId,challengerUserId,challengeeUserId,scheduledTime){var modal=$uibModal.open({templateUrl:"modules/challenges/client/views/conformation-modal.client.view.html",controller:"DeclineController",scope:$scope,backdrop:!1,windowClass:"app-modal-window",resolve:{challengeId:function(){return challengeId}}});modal.result.then(function(result){result&&$http.post("api/challenge/decline",{challengeObj:{challengeId:challengeId,challengerUserId:challengerUserId,challengeeUserId:challengeeUserId,scheduledTime:scheduledTime}}).success(function(){toastr.success("Challenge Declined","Success"),$scope.initPage()})["catch"](function(err){toastr.error("Error declining challenge ("+err.message+")","Error")})})},$scope.deleteChallenge=function(challengeId){var params={id:challengeId};$http.post("/api/challenge/delete",params).success(function(data){}),$scope.$dismiss()},$scope.dismiss=function(){$scope.$dismiss()},$scope.filterChallenges=function(){var minTimeToday=new Date;minTimeToday.setHours(0),minTimeToday.setMinutes(0);var maxTimeToday=new Date;maxTimeToday.setHours(23),maxTimeToday.setMinutes(59),angular.forEach($scope.challenges,function(value,index){var scheduledDate=new Date(value.scheduledTime);scheduledDate>minTimeToday&&scheduledDate<maxTimeToday?$scope.challengesToday.push(value):scheduledDate<minTimeToday?$scope.pastChallenges.push(value):scheduledDate>maxTimeToday&&$scope.upcomingChallenges.push(value)})},$scope.min=null,$scope.max=null,$scope.dt=null,$scope.initTimePicker=function(selectedDate){var min=new Date(selectedDate.getTime());min.setHours(0),min.setMinutes(0),$scope.min=min;var max=new Date(selectedDate.getTime());max.setHours(24),max.setMinutes(0),$scope.max=max},$scope.init=function(){$scope.dt=new Date,$scope.dt.setHours(12),$scope.dt.setMinutes(0),$scope.dt.setMilliseconds(0),$scope.initTimePicker($scope.dt)},$scope.init(),$scope.clear=function(){$scope.dt=null},$scope.open=function(){$scope.popup.opened=!0},$scope.popup={opened:!1},$scope.dateChange=function(){$scope.initTimePicker($scope.dt)},$scope.Won=function(challenge,winnerId){console.log(winnerId+" won this challenge. Ran the Won function.");var challengObj={id:challenge.id,winnerUserId:winnerId};$http.post("/api/challenge/update",challengObj).success(function(){toastr.success("Challenge Updated!","Success"),$scope.initPage()}).error(function(response){$scope.error=response.message});var rankingObject={challenger:challenge.challengerUser.id,challengee:challenge.challengeeUser.id};$http.post("/api/rankings/update",rankingObject).success(function(){$scope.initPage()}).error(function(response){$scope.error=response.message})},$scope.Lost=function(challenge,winnerId){console.log(winnerId+" won this challenge; ran the Lost function");var challengObj={id:challenge.id,winnerUserId:winnerId};$http.post("/api/challenge/update",challengObj).success(function(){toastr.success("Challenge Updated!","Success"),$scope.initPage()}).error(function(response){$scope.error=response.message});var newsObj={challenger:challenge.challengerUser.id,challengee:challenge.challengeeUser.id};$http.post("/api/news/createChallengeLost",newsObj).success(function(){}).error(function(response){$scope.error=response.message})},$scope.Submit=function(challenge,winnerId){var challengObj={id:challenge.id,winnerUserId:winnerId};$http.post("/api/challenge/update",challengObj).success(function(){toastr.success("Challenge Updated!","Success")}).error(function(response){$scope.error=response.message});var rankingObject={},newsObj={};winnerId===challenge.challengerUser.id?challenge.challengerUser.rank>challenge.challengeeUser.rank?(rankingObject={challenger:challenge.challengerUser.id,challengee:challenge.challengeeUser.id},$http.post("/api/rankings/update",rankingObject).success(function(){$scope.initPage()}).error(function(response){$scope.error=response.message})):(newsObj={challenger:challenge.challengeeUser.id,challengee:challenge.challengerUser.id},$scope.initPage(),$http.post("/api/news/createChallengeLost",newsObj).success(function(){}).error(function(response){$scope.error=response.message})):winnerId===challenge.challengeeUser.id&&(challenge.challengeeUser.rank>challenge.challengerUser.rank?(rankingObject={challenger:challenge.challengeeUser.id,challengee:challenge.challengerUser.id},$http.post("/api/rankings/update",rankingObject).success(function(){$scope.initPage()}).error(function(response){$scope.error=response.message})):(newsObj={challenger:challenge.challengerUser.id,challengee:challenge.challengeeUser.id},$scope.initPage(),$http.post("/api/news/createChallengeLost",newsObj).success(function(){}).error(function(response){$scope.error=response.message})))}}]),angular.module("challenge").controller("DeclineController",["$scope","$uibModal","$uibModalInstance",function($scope,$uibModal,$uibModalInstance){$scope.decline=function(){$uibModalInstance.close(!0)},$scope.dismiss=function(){$uibModalInstance.close(!1)}}]),angular.module("challenge").controller("DeleteController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator","Admin","$uibModal","Challenges","Circuit","challengeId",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator,Admin,$uibModal,Challenges,Circuit,challengeId){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.selectedTime="Now",$scope.message="",$scope.challengeId=-1,$scope.challengerId=-1,$scope.challengeeId=-1,$scope.challenges={},$scope.challengesToday=[],$scope.pastChallenges=[],$scope.upcomingChallenges=[],$scope.deleteChallenge=function(){console.log($scope);var params={id:challengeId};console.log("deleting challenge with id "+challengeId),$http.post("/api/challenge/delete",params).success(function(data){toastr.success("Challenge Deleted","Success")}),$scope.$close(!0)},$scope.dismiss=function(){$scope.$close(!0)}}]),angular.module("challenge").controller("ResultController",["$scope","$state","$http","Authentication","challenge",function($scope,$state,$http,Authentication,challenge){var challengerUser=challenge.challengerUser,challengeeUser=challenge.challengeeUser,challengeId=challenge.id;$scope.model={Id:-1},$scope.challengeId=challengeId,$scope.Submit=function(){var challengObj={id:$scope.challengeId,scheduledTime:$scope.dt};$http.post("/api/challenge/update",challengObj).error(function(response){$scope.error=response.message});var param={};param=Authentication.user.id===challengeeUser.id?{challengObj:challengObj,changedTimeUserId:challengeeUser.id,otherUserId:challengerUser.id}:{challengObj:challengObj,changedTimeUserId:challengerUser.id,otherUserId:challengeeUser.id},$http.post("/api/emails/challengeTimeChangeNotification",param).success(function(){toastr.success("Time updated & notification email sent!","Success"),$scope.initPage()}).error(function(response){$scope.error=response.message}),$scope.$close(!0)},$scope.dismiss=function(){$scope.$dismiss()},$scope.confirm=function(){$scope.$close(!0)},$scope.min=null,$scope.max=null,$scope.dt=null,$scope.initTimePicker=function(selectedDate){var min=new Date(selectedDate.getTime());min.setHours(0),min.setMinutes(0),$scope.min=min;var max=new Date(selectedDate.getTime());max.setHours(24),max.setMinutes(0),$scope.max=max},$scope.init=function(){$scope.dt=new Date(challenge.scheduledTime),$scope.initTimePicker($scope.dt)},$scope.init(),$scope.clear=function(){$scope.dt=null},$scope.open=function(){$scope.popup.opened=!0},$scope.popup={opened:!1},$scope.dateChange=function(){$scope.initTimePicker($scope.dt)}}]),angular.module("challenge").factory("User",["$resource",function($resource){return $resource("api/user",{},{get:{method:"GET"},update:{method:"PUT"}})}]),angular.module("challenge").factory("Challenges",["$resource",function($resource){return $resource("api/rankings/challengees",{userId:"@_id"},{query:{method:"GET",params:{},isArray:!0},update:{method:"PUT"}})}]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").run(["Menus",function(Menus){}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("contact-us",{url:"/contact-us",templateUrl:"modules/core/client/views/contact.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("ChallengesCardController",["$scope","$timeout","$window","Authentication","Circuit","$http",function($scope,$timeout,$window,Authentication,Circuit,$http){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.displayRank="Unknown",$scope.circuit="Unknown",$http.get("/api/user").success(function(response){$scope.circuit=Circuit.circuit(response.rank),$scope.displayRank=Circuit.displayRank(response.rank)}).error(function(response){$scope.error=response.message})}]),angular.module("news").controller("NewsCardController",["$scope","$filter","$http",function($scope,$filter,$http){$scope.newsList=[],$http.post("/api/news/getNews").success(function(response){$scope.newsList=response}).error(function(err){console.log(err)})}]),angular.module("core").controller("ProfileCardController",["$scope","$timeout","$window","Authentication","Circuit","$http","lodash",function($scope,$timeout,$window,Authentication,Circuit,$http,lodash){$scope.gamesWon=0,$scope.gamesLost=0,$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.displayRank="",$scope.circuit="",$http.get("/api/user").success(function(response){(new Circuit).then(function(result){$scope.circuit=result.circuit(response.rank),$scope.displayRank=result.displayRank(response.rank)});var params={userId:$scope.user.id,paranoid:!1};$http.post("/api/challenge/mychallenges",params).success(function(challenges){lodash.forEach(challenges,function(challenge){$scope.user.id===challenge.winnerUserId?$scope.gamesWon++:null!==challenge.winnerUserId&&challenge.winnerUserId!==-1&&$scope.gamesLost++})}).error(function(response){$scope.error=response.message})})["catch"](function(err){console.log(err)})}]),angular.module("rankings").controller("RankingCardController",["$scope","$filter","Rankings","Circuit",function($scope,$filter,Rankings,Circuit){$scope.world=[],$scope.major=[],$scope.minor=[],$scope.mosh=[],Rankings.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.figureOutItemsToDisplay=function(){var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.world=$scope.filter($scope.users.slice(0,$scope.cSize)),$scope.major=$scope.filter($scope.users.slice($scope.cSize,2*$scope.cSize)),$scope.minor=$scope.filter($scope.users.slice(2*$scope.cSize,3*$scope.cSize)),$scope.mosh=$scope.filter($scope.users.slice(3*$scope.cSize,end))},$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=100,$scope.currentPage=1,(new Circuit).then(function(result){$scope.cSize=result.cSize,$scope.figureOutItemsToDisplay()})},$scope.filter=function(users){$scope.filteredItems=$filter("filter")(users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;return $scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("core").controller("StatsCardController",["$scope","$timeout","$window","Authentication","Circuit","$http","Rankings","Challenges",function($scope,$timeout,$window,Authentication,Circuit,$http,Rankings,Challenges){$scope.data=[],Rankings.query(function(data){$scope.users=data,$http.get("/api/user").success(function(response){$scope.currentUserId=response.id,$http.get("/api/challenge/getall").success(function(data){$scope.labels=[],$scope.colors=[],$scope.challenges=data,angular.forEach($scope.users,function(user,index){var games=0,wins=0,losses=0;angular.forEach($scope.challenges,function(challenge){challenge.challengerUserId!==user.id&&challenge.challengeeUserId!==user.id||!challenge.winnerUserId||(games++,challenge.winnerUserId===user.id?wins++:losses++)}),user.gamesPlayed=games,0===user.gamesPlayed?user.winLossRatio=0:user.winLossRatio=wins/user.gamesPlayed,$scope.data.push({key:user.displayName+", Rank "+user.rank,values:[]});var obj={x:user.gamesPlayed,y:user.rank,size:user.winLossRatio,shape:"circle"};$scope.data[index].values.push(obj)})})})}),$scope.options={chart:{type:"scatterChart",height:450,color:d3.scale.category10().range(),scatter:{onlyCircles:!0},showDistX:!0,showDistY:!0,tooltip:{contentGenerator:function(key,x,y,e,graph){return"<p>"+key.series[0].key+"</p><p>Games Played: "+key.series[0].values[0].x+"</p><p>Win Percentage: "+Math.round(100*key.series[0].values[0].size)+"%</p>"}},duration:350,xAxis:{axisLabel:"Number of Games Played"},yAxis:{axisLabel:"Rank",axisLabelDistance:-5},zoom:{enabled:!1,scaleExtent:[1,10],useFixedDomain:!1,useNiceScale:!1,horizontalOff:!1,verticalOff:!1,unzoomEventType:"dblclick.zoom"},showLegend:!1,yDomain:[30,1]}}}]),angular.module("core").controller("ContactController",["$scope","ContactForm",function($scope,ContactForm){$scope.contact=function(isValid){if($scope.error=null,$scope.success=null,!isValid)return $scope.$broadcast("show-errors-check-validity","contactForm"),!1;if(""===grecaptcha.getResponse())$scope.error="Please resolve the captcha first!";else{var contactForm=new ContactForm({name:this.name,email:this.email,subject:this.subject,message:this.message,grecaptcha:grecaptcha.getResponse()});$scope.submitButton="Working...",$scope.submitButtonDisabled=!0,contactForm.$save(function(response){grecaptcha.reset(),$scope.success=response.message},function(errorResponse){console.log("errorResponse",errorResponse),grecaptcha.reset(),$scope.error=errorResponse.data.message}),$scope.submitButton="Send",$scope.submitButtonDisabled=!1}}}]),angular.module("core").controller("DrConfirmModalController",["$scope","$http","$uibModal","$window",function($scope,$http,$uibModal,$window){$scope.drop=function(){console.log("dropping",$scope.$parent.selectedUser.displayName),$http.post("/api/rankings/drDropUser",$scope.$parent.selectedUser).success(function(result){$scope.$close(!0),$window.init()})},$scope.cancel=function(){$scope.$close(!0)}}]),angular.module("core").controller("DrCreateController",["$scope","$filter","DrRankings","$http",function($scope,$filter,DrRankings,$http){$scope.users=[],$scope["class"]="",$scope.selected=[],$scope.players=[],$scope.isSelected=function(id){return $scope.selected.indexOf(id)!==-1},$scope.creatable=!1,$scope.addPlayer=function(user){var index=$scope.selected.indexOf(user.id);index!==-1?($scope.selected.splice(index,1),$scope.players.splice(index,1)):$scope.selected.length<2&&($scope.selected.push(user.id),$scope.players.push(user)),$scope.creatable=2===$scope.selected.length},DrRankings.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=10,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()},$scope.createChallenge=function(){var challengerId=0,challengeeId=0;console.log($scope.players[0].rank,$scope.players[1].rank),$scope.players[0].rank>$scope.players[1].rank?(challengerId=$scope.players[0].id,challengeeId=$scope.players[1].id):(challengerId=$scope.players[1].id,challengeeId=$scope.players[0].id),console.log(challengerId,challengeeId);var challengObj={scheduledTime:new Date,challengerUserId:challengerId,challengeeUserId:challengeeId,winnerUserId:null};$http.post("/api/challenge/create",challengObj).success(function(response){$scope.challengeId=response.id}).error(function(response){$scope.error=response.message}),$scope.$close(!0),toastr.success("Challenge created","Success")}}]),angular.module("core").controller("DrShuffleController",["$scope","$filter","DrRankings","$uibModal","$rootScope","$window",function($scope,$filter,DrRankings,$uibModal,$rootScope,$window){$scope.shuffleItems=[],$scope.figureOutItemsToDisplayShuffle=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.shuffleItems=$scope.filteredItems.slice(begin,end)},$scope.buildShufflePager=function(){$scope.pagedItems=[],$scope.itemsPerPage=100,$scope.currentPage=1,$scope.figureOutItemsToDisplayShuffle()},$rootScope.displayRoom&&DrRankings.query(function(data){$scope.users=data,$scope.users.sort(function(a,b){return a.lastName>b.lastName?1:b.lastName>a.lastName?-1:0}),$scope.buildShufflePager()}),$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()},$scope.pageChanged=function(){$scope.figureOutItemsToDisplayShuffle()},$scope.selectUser=function(user){$scope.selectedUser=user;var modal=$uibModal.open({templateUrl:"modules/core/client/views/displayRoom/drConfirmModal.client.view.html",controller:"DrConfirmModalController",scope:$scope,windowClass:"app-modal-window"});modal.result.then(function(){console.log("modal closed"),window.location.reload(!0)})}}]),angular.module("core").config(["IdleProvider",function(IdleProvider){IdleProvider.idle(60),IdleProvider.timeout(!1)}]).controller("DrRankingController",["$scope","$filter","DrRankings","Circuit","$rootScope","Idle",function($scope,$filter,DrRankings,Circuit,$rootScope,Idle){if(console.log("\n\nCONTROLLER LOADED\n\n"),$scope.world=[],$scope.major=[],$scope.minor=[],$scope.mosh=[],$rootScope.displayRoom){Idle.watch(),DrRankings.query(function(data){$scope.users=data,$scope.buildPager()});var populateRankings=function(){console.log("\n\nGETTING RANKINGS\n\n"),DrRankings.query(function(data){$scope.users=data,$scope.buildPager()})};$scope.getRankingsRepeat=setInterval(populateRankings,5e3),$scope.$on("IdleStart",function(){console.log("\n\nYOU ARE IDLE\n\n"),clearInterval($scope.getRankingsRepeat)}),$scope.$on("IdleEnd",function(){console.log("\n\nYOU ARE NOT IDLE\n\n"),populateRankings(),$scope.getRankingsRepeat=setInterval(populateRankings,5e3)})}$scope.figureOutItemsToDisplay=function(){var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.world=$scope.filter($scope.users.slice(0,$scope.cSize)),$scope.major=$scope.filter($scope.users.slice($scope.cSize,2*$scope.cSize)),$scope.minor=$scope.filter($scope.users.slice(2*$scope.cSize,3*$scope.cSize)),$scope.mosh=$scope.filter($scope.users.slice(3*$scope.cSize,end))},$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=100,$scope.currentPage=1,(new Circuit).then(function(result){$scope.cSize=result.cSize,$scope.figureOutItemsToDisplay()})},$scope.filter=function(users){$scope.filteredItems=$filter("filter")(users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;return $scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("core").config(["IdleProvider",function(IdleProvider){IdleProvider.idle(60),IdleProvider.timeout(!1)}]).controller("DrResultsController",["$scope","$http","$uibModal","DrResults","$rootScope","Idle",function($scope,$http,$uibModal,DrResults,$rootScope,Idle){$scope.selectedTime="Now",$scope.message="",$scope.challengeId=-1,$scope.challengerId=-1,$scope.challengeeId=-1,$scope.challenges={},$scope.challengesToday=[],$scope.pastChallenges=[],$scope.upcomingChallenges=[],$scope.Submit=function(challenge,winnerId){var challengObj={id:challenge.id,winnerUserId:winnerId};$http.post("/api/challenge/update",challengObj).success(function(){toastr.success("Challenge Updated!","Success")}).error(function(response){$scope.error=response.message});var rankingObject={},newsObj={};winnerId===challenge.challengerUser.id?challenge.challengerUser.rank>challenge.challengeeUser.rank?(rankingObject={challenger:challenge.challengerUser.id,challengee:challenge.challengeeUser.id},$http.post("/api/rankings/update",rankingObject).success(function(){$scope.initPage()}).error(function(response){$scope.error=response.message})):(newsObj={challenger:challenge.challengeeUser.id,challengee:challenge.challengerUser.id},$scope.initPage(),$http.post("/api/news/createChallengeLost",newsObj).success(function(){}).error(function(response){$scope.error=response.message})):winnerId===challenge.challengeeUser.id&&(challenge.challengeeUser.rank>challenge.challengerUser.rank?(rankingObject={challenger:challenge.challengeeUser.id,challengee:challenge.challengerUser.id},$http.post("/api/rankings/update",rankingObject).success(function(){$scope.initPage()}).error(function(response){$scope.error=response.message})):(newsObj={challenger:challenge.challengerUser.id,challengee:challenge.challengeeUser.id},$scope.initPage(),$http.post("/api/news/createChallengeLost",newsObj).success(function(){}).error(function(response){$scope.error=response.message})))},$scope.dismiss=function(){$scope.$dismiss()},$scope.cancelModal=function(challengeId){var modal=$uibModal.open({templateUrl:"modules/challenges/client/views/cancel-modal.client.view.html",controller:"DeleteController",scope:$scope,backdrop:!1,windowClass:"app-modal-window",resolve:{challengeId:function(){return challengeId}}});modal.result.then(function(){$scope.initPage()})},$scope.createChallengeModal=function(){var modal=$uibModal.open({templateUrl:"modules/core/client/views/displayRoom/drCreate.client.view.html",controller:"DrCreateController",scope:$scope,size:"lg",windowClass:"app-modal-window"});modal.result.then(function(){$scope.initPage()})},$scope.getChallenges=function(){({userId:$scope.challengerId});DrResults.query(function(response){$scope.challenges=response,angular.forEach($scope.challenges,function(value,index){$http.post("/api/user/getUserById",{userId:value.challengerUserId}).success(function(data){value.challengerUser=data}),$http.post("/api/user/getUserById",{userId:value.challengeeUserId}).success(function(data){value.challengeeUser=data}),value.selected=null}),$scope.filterChallenges()})},$rootScope.displayRoom&&($scope.initPage=function(){$scope.challenges={},$scope.challengesToday=[],$scope.pastChallenges=[],$scope.upcomingChallenges=[],$scope.getChallenges()},$scope.initPage(),Idle.watch(),$scope.$on("IdleStart",function(){}),$scope.$on("IdleEnd",function(){$scope.initPage()})),$scope.deleteChallenge=function(challengeId){var params={id:challengeId};$http.post("/api/challenge/delete",params).success(function(data){}),$scope.$dismiss()},$scope.dismiss=function(){$scope.$dismiss()},$scope.filterChallenges=function(){var minTimeToday=new Date;minTimeToday.setHours(0),minTimeToday.setMinutes(0);var maxTimeToday=new Date;maxTimeToday.setHours(23),maxTimeToday.setMinutes(59),angular.forEach($scope.challenges,function(value,index){var scheduledDate=new Date(value.scheduledTime);scheduledDate>minTimeToday&&scheduledDate<maxTimeToday?$scope.challengesToday.push(value):scheduledDate<minTimeToday?$scope.pastChallenges.push(value):scheduledDate>maxTimeToday&&$scope.upcomingChallenges.push(value)})},$scope.open=function(){$scope.popup.opened=!0},$scope.popup={
opened:!1},$scope.dateChange=function(){$scope.initTimePicker($scope.dt)}}]),angular.module("core").controller("HeaderController",["$rootScope","$scope","$location","$state","Authentication","Menus","$window",function($rootScope,$scope,$location,$state,Authentication,Menus,$window){$scope.$state=$state,$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1,ga("send","pageview",$location.path())}),$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("core").controller("HomeController",["$scope","Authentication","$http","$compile","$timeout","$rootScope",function($scope,Authentication,$http,$compile,$timeout,$rootScope){$scope.authentication=Authentication,$scope.authentication.user&&("admin"===$scope.authentication.user.roles[0]||"admin"===$scope.authentication.user.roles[1]?$scope.isAdmin=!0:$scope.userView=!0),$scope.initialized=!1,$scope.mainDeck={rootUrl:"#/deckster",gridsterOpts:{max_cols:4,widget_margins:[10,10],widget_base_dimensions:["auto",250],responsive_breakpoint:850}},$scope.displayRoom=$scope.isAdmin,$rootScope.displayRoom=$scope.displayRoom,$scope.setUserView=function(){$scope.userView=!0},$scope.desetUserView=function(){$scope.isAdmin&&($scope.userView=!1)};var viewRankings=function(cardConfig,cb){$scope.authentication.user&&$http.get("modules/core/client/views/cards/rankingsCard.client.view.html").success(function(html){cb&&cb($compile(html)($scope))})},viewProfile=function(cardConfig,cb){$scope.authentication.user&&$http.get("modules/core/client/views/cards/profile.client.view.html").success(function(html){cb&&cb($compile(html)($scope))})},viewNews=function(cardConfig,cb){$scope.authentication.user&&$http.get("modules/core/client/views/cards/news.client.view.html").success(function(html){return cb&&cb($compile(html)($scope))})},viewChallenges=function(cardConfig,cb){$scope.authentication.user&&$http.get("modules/challenges/client/views/my-challenges.client.view.html").success(function(html){return cb&&cb($compile(html)($scope))})},viewStats=function(cardConfig,cb){$scope.authentication.user&&$http.get("modules/core/client/views/Cards/statsCard.client.view.html").success(function(html){return cb&&cb($compile(html)($scope))})};$scope.mainDeck.cards=[{title:"Rankings",id:"rankingsCard",summaryContentHtml:viewRankings,detailsContentHtml:viewRankings,position:{size_x:2,size_y:2,col:1,row:3}},{title:"Your Profile",id:"profileCard",summaryContentHtml:viewProfile,detailsContentHtml:viewProfile,position:{size_x:1,size_y:2,col:1,row:1}},{title:"News Feed",id:"newsFeedCard",summaryContentHtml:viewNews,detailsContentHtml:viewNews,position:{size_x:1,size_y:2,col:4,row:1}},{title:"My Challenges",id:"ChallengesCard",summaryContentHtml:viewChallenges,detailsContentHtml:viewChallenges,position:{size_x:2,size_y:2,col:2,row:1}},{title:"My Stats",id:"StatsCard",summaryContentHtml:viewStats,detailsContentHtml:viewStats,position:{size_x:2,size_y:2,col:3,row:3}}],$timeout(function(){$scope.initialized=!0})}]),angular.module("core").directive("addResults",function(){return{restrict:"E",templateUrl:"/modules/core/client/views/displayRoom/drResults.client.view.html",controller:"DrResultsController"}}),angular.module("core").factory("Deckster",function(){return window.Deckster}).directive("decksterDeck",["$parse","$timeout",function($parse,$timeout){var defaults={gridsterOpts:{max_cols:4,widget_margins:[10,10],widget_base_dimensions:["auto",250],responsive_breakpoint:850}};return{restrict:"EA",replace:!0,templateUrl:"modules/core/client/views/decksterDeck.html",scope:{deck:"=",initialized:"="},controller:["$scope",function($scope){$scope.deckInitialized=!1,$scope.$on("deckster:resize",function(){$scope.deckster&&$timeout(function(){$scope.deckster.$gridster.recalculate_faux_grid()})}),this.addCard=function(card,callback){$scope.deckster.addCard(card,function(card){callback&&callback(card)})},this.init=function(element,opts){$scope.deckster=$(element).deckster(opts).data("deckster"),$scope.deckInitialized=!0}}],link:function(scope,element,attrs,ctrl){var deckOptions=$.extend(!0,{},defaults,scope.deck),$deckEl=$(element).find(".deckster-deck");scope.$watch("initialized",function(init){init&&!scope.deckInitialized&&ctrl.init($deckEl,deckOptions)}),scope.$on("$destroy",function(){scope.deckster.destroy(),scope.deckInitialized=!1})}}}]).directive("decksterCard",["$parse","$q","$http","$timeout",function($parse,$q,$http,$timeout){return{restrict:"E",require:["^decksterDeck","decksterCard"],controller:["$scope","$compile",function($scope,$compile){this.getLeftControlsContent=function(card,cb){$timeout(function(){cb($compile("<div></div>")($scope))})},this.getRightControlsContent=function(card,cb){$timeout(function(){cb($compile("<div></div>")($scope))})},this.getCenterControlsContent=function(card,cb){$timeout(function(){cb($compile("<div></div>")($scope))})},this.onReload=function(card){},this.onResize=function(card){},this.onExpand=function(card){},this.scrollToCard=function(){$scope.card.scrollToCard()},this.toggleCard=function(){},this.setUpCard=function(cardOpts){return cardOpts.summaryViewType||cardOpts.detailsViewType||(cardOpts.summaryContentHtml=cardOpts.summaryContentHtml||this.getSummaryContent,cardOpts.detailsContentHtml=cardOpts.detailsContentHtml||this.getDetailsContent,cardOpts.onResize=cardOpts.onResize||this.onResize,cardOpts.onReload=cardOpts.onReload||this.onReload),cardOpts.showFooter=!1,cardOpts.leftControlsHtml=this.getLeftControlsContent,cardOpts.rightControlsHtml=this.getRightControlsContent,cardOpts.centerControlsHtml=this.getCenterControlsContent,$scope.$on("deckster-card:scrollto-"+cardOpts.id,this.scrollToCard),$scope.$on("deckster-card:toggle-"+cardOpts.id,this.toggleCard),cardOpts}}],link:function(scope,element,attrs,ctrls){var deckCtrl=ctrls[0],cardCtrl=ctrls[1],cardOpts=$parse(attrs.cardOptions||{})(scope);scope.$watch("deckInitialized",function(initialized){initialized&&deckCtrl.addCard(cardCtrl.setUpCard(cardOpts),function(card){scope.card=card,scope.$on("deckster:resize",function(){}),scope.$on("deckster:redraw",function(){$timeout(function(){})})})})}}}]).directive("decksterPopout",["$injector","$compile","$http","Deckster",function($injector,$compile,$http,Deckster){return{restrict:"E",link:function(scope,element){var cardId,section,$routeParams=$injector.get("$routeParams");cardId=$routeParams.id,section=$routeParams.section;var getSummaryTemplate=function(cardConfig,cb){$http.get("partials/testSummaryCard.html").success(function(html){cb&&cb($compile(html)(scope))})},getDetailsTemplate=function(cardConfig,cb){$http.get("partials/testDetailsCard.html").success(function(html){cb&&cb($compile(html)(scope))})},cardConfig={title:"Photos",id:"photoCard",summaryContentHtml:getSummaryTemplate,detailsContentHtml:getDetailsTemplate,position:{size_x:1,size_y:1,col:1,row:1}};Deckster.generatePopout(element,cardConfig,section)}}}]),angular.module("core").directive("rankingShuffle",function(){return{restrict:"E",templateUrl:"/modules/core/client/views/displayRoom/drRankingShuffle.client.view.html",controller:"DrShuffleController"}}),angular.module("core").directive("rankingsDisplay",function(){return{restrict:"E",templateUrl:"/modules/core/client/views/displayRoom/drRankings.client.view.html",controller:"DrRankingController"}}),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}),scope.$on("show-errors-reset",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return reset()}),toggleClasses=function(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(attrs.showErrors.indexOf("skipFormGroupCheck")===-1&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("Card",["$http","Deckster","DataManager","$filter","lodash",function($http,Deckster,DataManager,$filter,lodash){function capsFormatter(val){return val.toUpperCase()}function capsNoCommasFormatter(val){return"string"==typeof val||val instanceof String?(val=val.replace(",",""),val.toUpperCase()):val}function titleFormatter(val,unformat){return unformat?lodash.snakeCase(val):lodash.startCase(val)}function titleKeepSymbolsFormatter(val){return lodash.map(lodash.words(val,/[^\s_]+/g),function(word){return lodash.capitalize(word)}).join(" ")}function nameFormatter(val,unformat){var parts;return unformat?val&&val.match(/\s/g)?(parts=val.split(" "),(parts[1].trim()+", "+parts[0].trim()).toLowerCase()):val.toLowerCase():val===!0||val===!1?val:val&&val.match(/.*,.*/g)?(parts=val.split(","),lodash.startCase([parts[1].trim(),parts[0].trim()].join(" "))):lodash.startCase(val)}function currencyFormatter(val,decimalPlaces){return lodash.isFinite(val)?$filter("currency")(val,"$",decimalPlaces||0):val}function dateFormatter(date,format){return date}var Card=function(cardData){return this.setData(cardData)};return Card.prototype.setData=function(cardData){return angular.extend(this,cardData),this},Card.prototype.onResize=function(card){card.resizeCardViews()},Card.prototype.loadData=function(card,callback){card.showSpinner();var cardOptions=card.options.getCurrentViewOptions(card.currentSection),cardType=card.options.getCurrentViewType(card.currentSection);"drilldownView"===cardType&&(cardType=cardOptions.viewType);var loadData=function(data){var transformData=function(data){data=DataManager.transformDataForCard(data,cardType,cardOptions),callback&&callback(data),card.hideSpinner()};cardOptions.preDataTransform?cardOptions.preDataTransform(card,data,transformData):transformData(data)};if("table"!==cardType){var filters={};$http.get(cardOptions.apiUrl,{params:filters}).then(function(response){loadData(response.data)})["finally"](function(){card.hideSpinner()})}else card.hideSpinner()},Card.prototype.reloadView=function(card){var view=Deckster.views[card.options.getCurrentViewType(card.currentSection)];view.reload&&view.reload(card,card.currentSection)},Card.prototype.isNew=function(){return!angular.isDefined(this.id)},Card.prototype.getCurrentViewType=function(section){return this[section+"ViewType"]},Card.prototype.getCurrentViewOptions=function(section){var viewOptions=this[section+"ViewOptions"];return"drilldownView"===this.getCurrentViewType(section)?viewOptions.views[viewOptions.activeView]:viewOptions},Card.dataFormatter={name:nameFormatter,date:dateFormatter,title:titleFormatter,titleKeepSymbols:titleKeepSymbolsFormatter,"default":titleFormatter,caps:capsFormatter,capsNoCommas:capsNoCommasFormatter,currency:currencyFormatter,none:function(val){return val}},Card.prototype.getDataFormatter=function(format){return lodash.isEmpty(format)?Card.dataFormatter["default"]:lodash.isString(format)?Card.dataFormatter[format]:Card.dataFormatter[format.type]},Card}]),angular.module("core").factory("Circuit",["$http","$q",function($http,$q){var circuits=function(){var deferred=$q.defer(),Circuit={};return $http.get("/api/props").then(function(response){Circuit.cSize=response.data.circuitSize?response.data.circuitSize:10;var cSize=Circuit.cSize;Circuit.circuit=function(rank){return null===rank||rank>3*cSize?"Mosh Pit":rank<+cSize+1?"World Circuit":rank<2*+cSize+1?"Major Circuit":rank<3*+cSize+1?"Minor Circuit":"Circuit undetermined"},Circuit.displayRank=function(rank){return null===rank||rank>3*cSize?"Un":rank%cSize===0?cSize:rank%cSize},deferred.resolve(Circuit)},function(error){console.log("Error",error)}),deferred.promise};return circuits}]),angular.module("core").factory("ContactForm",["$resource",function($resource){return $resource("api/contact",{},{update:{method:"POST"}})}]),angular.module("core").factory("DataManager",["$http","$q","Deckster","lodash",function($http,$q,Deckster,lodash){function setDefaultTransformOptions(options){options.dataTransform=lodash.merge({},options.dataTransform),options.dataTransform.titleFormats=lodash.merge({category:"default",series:"default",categoryX:"default",categoryY:"default"},options.dataTransform.titleFormats)}function boxPlotDataTransformer(data,options){var categoryData,dataTransform=options.dataTransform,categoryTitleFormatter=getDataFormatter(dataTransform.titleFormats.category);categoryData="category"===dataTransform.row?lodash.map(lodash.pluck(data,dataTransform.nameColumn),function(week){return categoryTitleFormatter(week,dataTransform.titleFormats.category.format)}):lodash.pluck(data,dataTransform.nameColumn);var seriesData=lodash.map(data,function(row){var lowerLimit=parseFloat(row.lower_limit),upperLimit=parseFloat(row.upper_limit);return row.min<=lowerLimit&&(row.min=lowerLimit),row.max>=upperLimit&&(row.max=upperLimit),lodash.map([row.min,row.q1,row.median,row.q3,row.max],parseFloat)}),meanData=lodash.map(data,function(meanValue){return"category"===dataTransform.row&&(meanValue[dataTransform.nameColumn]=categoryTitleFormatter(meanValue[dataTransform.nameColumn],dataTransform.titleFormats.category.format)),lodash.map([categoryData.indexOf(meanValue[dataTransform.nameColumn]),parseFloat(meanValue.mean)])});return{name:"Hourly Distribution By Week",data:seriesData,categories:categoryData,mean:meanData}}function chartDataTransformer(data,options){var categories=[],series=[],dataTransform=options.dataTransform,firstRow=data[0];data=dataTransform.emptyRow?data.slice(1):data;var nameColumn=dataTransform.nameColumn;return"series"===dataTransform.row?(categories=lodash.map(lodash.keys(lodash.omit(firstRow,dataTransform.nameColumn)),function(category){return category}),lodash.forEach(data,function(obj){series.push({name:obj[dataTransform.nameColumn],data:lodash.map(lodash.values(lodash.omit(obj,dataTransform.nameColumn)),Number)})})):"category"===dataTransform.row&&(console.log(data),categories=lodash.map(data,function(obj){return obj[nameColumn]}),lodash.forOwn(firstRow,function(value,key){key!==nameColumn&&series.push({name:key,data:lodash.map(lodash.pluck(data,key),Number),visible:!lodash.includes(options.nonVisibleSeries,key)})})),applySeriesOptions(series,options),{query:options.query,categories:categories,series:series}}function quadChartDataTransformer(data,options){return{data:data}}function columnRangeDataTransformer(data,options){var series=[],dataTransform=options.dataTransform,categoryTitleFormatter=getDataFormatter(dataTransform.titleFormats.category),seriesTitleFormatter=getDataFormatter(dataTransform.titleFormats.series),categories=lodash.map(data,function(obj){return categoryTitleFormatter(obj[dataTransform.nameColumn],dataTransform.titleFormats.category.format)});return lodash.forEach(dataTransform.seriesMap,function(seriesInfo){var seriesName=seriesInfo.name;series.push({name:seriesTitleFormatter(seriesName,dataTransform.titleFormats.series.format),data:lodash.map(data,function(row){var returnData=[];return returnData=lodash.isUndefined(seriesInfo.seriesColumn)?[row[seriesInfo.minColumn],row[seriesInfo.maxColumn]]:[row[seriesInfo.seriesColumn]]})})}),applySeriesOptions(series,options),{query:options.query,categories:categories,series:series}}function getDataFormatter(format){return lodash.isEmpty(format)?dataTransformer["default"]:lodash.isString(format)?dataTransformer[format]:dataTransformer[format.type]}function percentageChartDataTransformer(data,options){var transformedData,dataTransform=options.dataTransform,categoryTitleFormatter=getDataFormatter(dataTransform.titleFormats.category);return transformedData="series"===dataTransform.row?lodash.map(lodash.pairs(data[0]),function(pair){return pair[0]=categoryTitleFormatter(pair[0],dataTransform.titleFormats.category.format),pair}):lodash.map(data,function(row){var title=row[dataTransform.nameColumn],value=lodash.values(lodash.omit(row,dataTransform.nameColumn))[0];return{name:categoryTitleFormatter(title),y:parseFloat(value)}}),applySeriesOptions(transformedData,options),{query:options.query,data:transformedData}}function tableDataTransformer(data,options){return data}function geoMapDataTransformer(data,options){var generateGeoJSONData=function(geoRecs){var returnGeoJSON=[];return lodash.each(geoRecs,function(geoRec){var latitude=geoRec.latitude,longitude=geoRec.longitude;if(!lodash.isNull(latitude)&&!lodash.isNull(longitude)){var geoPoint={};geoPoint.type="Feature",geoPoint.properties={},lodash.forEach(lodash.keys(geoRec),function(key){geoPoint.properties[key]=geoRec[key]}),geoPoint.geometry={},geoPoint.geometry.type="Point",geoPoint.geometry.coordinates=[longitude,latitude],returnGeoJSON.push(geoPoint)}}),returnGeoJSON},geoJSONData=generateGeoJSONData(data)||[];return{query:options.query,geoJSONData:geoJSONData}}function getGradientColor(baseColor,percent){var gradient=Math.round(180*(1-percent)),step=lodash.padLeft(gradient.toString(16),2,"0");return baseColor.replace(/00/g,step)}function heatmapChartDataTransformer(data,options){var heatmapData=[];if(!lodash.isEmpty(data)){var dataTransform=options.dataTransform,categoryXTitleFormatter=getDataFormatter(dataTransform.titleFormats.categoryX),categoryYTitleFormatter=getDataFormatter(dataTransform.titleFormats.categoryY),categoriesX=lodash.map(lodash.keys(lodash.omit(data[0],dataTransform.nameColumn)),function(category){return category}),categoriesY=lodash.map(data,function(category){return category[dataTransform.nameColumn]});return lodash.forEach(data,function(row,yIndex){lodash.forEach(row,function(value,key){if(key!==dataTransform.nameColumn){var xIndex=lodash.indexOf(categoriesX,key);if(options.colorMap){var color;if(options.colorMap.addGradientForRow){var baseColor=options.colorMap[row[dataTransform.nameColumn]]||options.colorMap["default"];color=0===value?options.colorMap["default"]:getGradientColor(baseColor,value)}else color=options.colorMap[value]||options.colorMap["default"];heatmapData.push({x:xIndex,y:yIndex,value:value,color:color})}else heatmapData.push([xIndex,yIndex,value])}})}),categoriesX=lodash.map(categoriesX,function(category){return categoryXTitleFormatter(category,dataTransform.titleFormats.categoryX.format)}),categoriesY=lodash.map(categoriesY,function(category){return categoryYTitleFormatter(category,dataTransform.titleFormats.categoryY.format)}),{query:options.query,categories:{x:categoriesX,y:categoriesY},data:heatmapData}}}var DataManager={};DataManager.fiscalYearStart=new Date("4/4/2015"),DataManager.fiscalYearEnd=new Date("4/6/2016");DataManager.colorMap={white:"#ffffff",headcount:"#7cb5ec",hires:"#8dce39",vterminations:"#f7a35c",iterminations:"#de546b"},DataManager.query=function(queryParams){var deferred=$q.defer();return $http.post("/api/data/query/",queryParams).then(function(response){deferred.resolve(response.data)},function(error){deferred.reject(error)}),deferred.promise};var _query=function(queryParams,callback){DataManager.query(queryParams).then(function(jsonResultSet){callback(jsonResultSet||[])},function(){callback([])})};DataManager.externalAPI=function(queryParams){var deferred=$q.defer();return $http.post("/api/data/externalAPI/",queryParams).then(function(response){deferred.resolve(response.data)},function(error){deferred.reject(error)}),deferred.promise},DataManager.transformDataForCard=function(data,cardType,cardOptions){setDefaultTransformOptions(cardOptions);var transform=cardOptions.customDataTransformer||dataTransformer[cardType];return transform(data,cardOptions)},DataManager.generateAutocompleteConfig=function(apiUrl,nameColumn,valueColumn,titleName,formatter,selected,dependsOnFilters,dependedByFilters,selections,allowClear){return{name:nameColumn,titleName:titleName,nameColumn:nameColumn,valueColumn:valueColumn,displayName:"<%= "+nameColumn+" %>",displayNameFormatter:formatter,selectedFilter:selected&&selected[nameColumn]?selected:null,autocomplete:{apiUrl:apiUrl},dependsOnFilters:dependsOnFilters,dependedByFilters:dependedByFilters,selections:selections,allowClear:allowClear}},DataManager.getLayerManagerClauses=function(layerManCol,layerManName){return{managerType:layerManCol,managerClause:layerManCol+" ~ '"+layerManName+"'",activeClause:"employment_status = 'active'"}};var setSeriesColors=function(card,series){var seriesColors=card.$deckster.options.seriesColorMap;lodash.each(series,function(series){var seriesName=series.name;lodash.contains(lodash.keys(seriesColors),seriesName)&&(series.color=seriesColors[seriesName])})};DataManager.loadSummaryBarData=function(deck,callback){if(deck.summaryBar.apiUrl){var filters=deck.getSelectedFiltersJSON();$http.get(deck.summaryBar.apiUrl,{params:filters}).then(function(response){var data=response.data;deck.summaryBar.postQuery&&deck.summaryBar.postQuery(deck,data),callback(data)})}else console.info("No endpoint found for card")},DataManager.defaultLoadData=function(card,callback){card.showSpinner();var cardOptions=card.options.getCurrentViewOptions(card.currentSection),cardType=card.options.getCurrentViewType(card.currentSection);if("drilldownView"===cardType&&(cardType=cardOptions.viewType),!cardOptions.query&&cardOptions.queryTemplate){var date={start:card.$deckster.options.startDate,end:card.$deckster.options.endDate,maxEndDate:card.$deckster.options.maxEndDate},selectedFilter=card.$deckster.options.getSelectedFiltersJSON();selectedFilter.date_range=date}var loadData=function(data){var transformData=function(data){data=DataManager.transformDataForCard(data,cardType,cardOptions),setSeriesColors(card,data.series),callback&&callback(data),card.hideSpinner()};cardOptions.preDataTransform?cardOptions.preDataTransform(card,data,transformData):transformData(data)};if(cardOptions.query)_query(cardOptions.query,function(data){loadData(data)},function(){card.hideSpinner()});else if(cardOptions.apiUrl)if("table"!==cardType){var filters={};$http.get(cardOptions.apiUrl,{params:filters}).then(function(response){loadData(response.data)})["finally"](function(){card.hideSpinner()})}else callback&&callback(),card.hideSpinner();else console.info("No endpoint found for card")},DataManager.defaultOnResize=function(card){card.resizeCardViews()},DataManager.defaultOnReload=function(card){var view=Deckster.views[card.options.getCurrentViewType(card.currentSection)];view.reload&&view.reload(card,card.currentSection)},DataManager.getLastUpdated=function(card,callback){$http.post("/api/data/lastUpdated/",card.lastUpdated||{}).then(function(response){var date=response.data;callback(date?date:null)})};var dataTransformer={barChart:chartDataTransformer,columnChart:chartDataTransformer,columnRangeChart:columnRangeDataTransformer,lineChart:chartDataTransformer,splineChart:chartDataTransformer,areaChart:chartDataTransformer,pieChart:percentageChartDataTransformer,donutChart:percentageChartDataTransformer,geoMap:geoMapDataTransformer,table:tableDataTransformer,quadChart:quadChartDataTransformer,heatmapChart:heatmapChartDataTransformer,boxPlot:boxPlotDataTransformer,histogramChart:chartDataTransformer},applySeriesOptions=function(series,options){options.seriesOptions&&(lodash.each(series,function(seriesItem){if(options.seriesOptions.name[seriesItem.name]){seriesItem=lodash.merge(seriesItem,options.seriesOptions.name[seriesItem.name]);var names=lodash.map(lodash.keys(options.seriesOptions.name),function(key){return key});seriesItem.order=names.indexOf(seriesItem.name)}return seriesItem}),series.sort(function(a,b){return a.order>b.order?1:a.order<b.order?-1:0}))};return DataManager.getDataFormatter=getDataFormatter,DataManager.chartPaging={getPagingValuesFromClause:function(pagingClause){var pagingValues={};return pagingValues.limit=parseInt(new RegExp(/(?:LIMIT\s)(\d+)/g).exec(pagingClause)[1]),pagingValues.offset=parseInt(new RegExp(/(?:OFFSET\s)(\d+)/g).exec(pagingClause)[1]),pagingValues},getRecTotal:function(card,callback){var templateVariables=card.options.getTemplateVariables(),countQuery=lodash.cloneDeep(card.options.getCurrentViewOptions(card.currentSection).query);countQuery.json.expression=countQuery.json.expression.replace(templateVariables.cardFilter_pagingClause,""),countQuery.json.expression="SELECT COUNT(*) FROM ("+countQuery.json.expression+") as countQuery",DataManager.query(countQuery).then(function(jsonResultSet){callback(parseInt(jsonResultSet[0].count))},function(){callback(0)})},getPageCount:function(card){var templateVariables=card.options.getTemplateVariables(),pagingClauseValues=this.getPagingValuesFromClause(templateVariables.cardFilter_pagingClause);return Math.ceil(templateVariables.cardFilter_pagingRecTotal/pagingClauseValues.limit)},getCurrentPage:function(card){var templateVariables=card.options.getTemplateVariables(),pagingClauseValues=this.getPagingValuesFromClause(templateVariables.cardFilter_pagingClause);return pagingClauseValues.offset/pagingClauseValues.limit+1}},DataManager}]),angular.module("core").factory("DrRankings",["$resource",function($resource){return $resource("api/rankings/drRankings",{query:{method:"GET",params:{},isArray:!0},update:{method:"PUT"}})}]),angular.module("core").factory("DrResults",["$resource",function($resource){return $resource("api/rankings/drResults",{query:{method:"GET",params:{},isArray:!0},update:{method:"PUT"}})}]),angular.module("core").factory("DrUser",["$resource",function($resource){return $resource("api/rankings/drUser",{query:{method:"GET",params:{},isArray:!0},update:{method:"PUT"}})}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden");break;case 404:$injector.get("$state").transitionTo("not-found")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("rankings").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("user").config(["$stateProvider",function($stateProvider){$stateProvider.state("rankings",{url:"/rankings","abstract":!0,templateUrl:"modules/rankings/client/views/rankings/list-rankings.client.view.html",data:{roles:["user"]},controller:"RankingController"}).state("rankings.users",{url:"/users",template:"",controller:"RankingController"}).state("rankings.user",{url:"/user/:userId",templateUrl:"modules/rankings/client/views/rankings/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Rankings",function($stateParams,Rankings){return Rankings.get({userId:$stateParams.userId})}]}})}]),angular.module("rankings").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update({userId:user.id},function(){$state.go("admin.user",{userId:user.id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("rankings").controller("RankingController",["$scope","$filter","Rankings","Circuit",function($scope,$filter,Rankings,Circuit){$scope.world=[],$scope.major=[],$scope.minor=[],$scope.mosh=[],Rankings.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.figureOutItemsToDisplay=function(){
var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.world=$scope.filter($scope.users.slice(0,$scope.cSize)),$scope.major=$scope.filter($scope.users.slice($scope.cSize,2*$scope.cSize)),$scope.minor=$scope.filter($scope.users.slice(2*$scope.cSize,3*$scope.cSize)),$scope.mosh=$scope.filter($scope.users.slice(3*$scope.cSize,end))},$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=100,$scope.currentPage=1,(new Circuit).then(function(result){$scope.cSize=result.cSize,$scope.figureOutItemsToDisplay()})},$scope.filter=function(users){$scope.filteredItems=$filter("filter")(users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;return $scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("rankings").factory("User",["$resource",function($resource){return $resource("api/user",{},{get:{method:"GET"},update:{method:"PUT"}})}]),angular.module("rankings").factory("Rankings",["$resource",function($resource){return $resource("api/rankings/user/:userId",{userId:"@_id"},{query:{method:"GET",params:{},isArray:!0},update:{method:"PUT"}})}]),angular.module("user.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("user.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/user/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/user/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("user").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("user").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("authentication.invalid",{url:"/invalidemail",templateUrl:"modules/users/client/views/email-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("user.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("user.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(){if(confirm("Are you sure you want to delete this user?")){var user=$scope.user;user.$remove({userId:user.id},function(){$state.go("admin.users")},function(errorResponse){$scope.error=errorResponse.data.message})}},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update({userId:user.id},function(){$state.go("admin.user",{userId:user.id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("user").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("user").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("user").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/user/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("user").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader","$http","User",function($scope,$timeout,$window,Authentication,FileUploader,$http,User){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/user/picture",autoUpload:!1}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return"|jpg|png|jpeg|bmp|gif|".indexOf(type)!==-1}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){var user=new User($scope.user);$scope.imageURL=user.profileImageURL,$scope.$broadcast("show-errors-reset","updatePicture"),$scope.success=!0,$http.get("api/user/me").success(function(data){Authentication.user=data,$scope.imageURL=Authentication.user.profileImageURL,$scope.$$phase||$scope.$apply()}),$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("user").controller("EditProfileController",["$scope","$http","$location","User","Authentication",function($scope,$http,$location,User,Authentication){$scope.user=Authentication.user,$scope.getProfile=function(){User.get(function(data){$scope.user=data})},$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new User($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("user").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/user/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("user").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("user").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.unshift(function(password){var result=PasswordValidator.getResult(password),strengthIdx=0,strengthMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];strengthMeter.length;return result.errors.length<strengthMeter.length&&(strengthIdx=strengthMeter.length-result.errors.length-1),scope.strengthColor=strengthMeter[strengthIdx].color,scope.strengthProgress=strengthMeter[strengthIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,void modelCtrl.$setValidity("strength",!1)):(scope.popoverMsg="",modelCtrl.$setValidity("strength",!0),password)})}}}]),angular.module("user").directive("passwordVerify",function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,modelCtrl){scope.$watch(function(){var combined;return(scope.passwordVerify||modelCtrl.$viewValue)&&(combined=scope.passwordVerify+"_"+modelCtrl.$viewValue),combined},function(value){value&&modelCtrl.$parsers.unshift(function(viewValue){var origin=scope.passwordVerify;return origin!==viewValue?void modelCtrl.$setValidity("passwordVerify",!1):(modelCtrl.$setValidity("passwordVerify",!0),viewValue)})})}}}),angular.module("user").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("user").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("user").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("user").factory("User",["$resource",function($resource){return $resource("api/user",{},{get:{method:"GET"},update:{method:"PUT"}})}]),angular.module("user.admin").factory("Admin",["$resource",function($resource){return $resource("api/admin/user/:userId",{userId:"@_id"},{query:{method:"GET",params:{},isArray:!0},update:{method:"PUT"}})}]);